<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Olds on My Hugo Techdoc Site</title>
    <link>http://localhost:1313/old/</link>
    <description>Recent content in Olds on My Hugo Techdoc Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/old/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Hello Word from the github blog.</title>
      <link>http://localhost:1313/old/2019-04-29-hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-04-29-hello-world/</guid>
      <description>&lt;p&gt;This is the Hello World from github.io. I prefer this over WIX&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adding DISQUS comments.</title>
      <link>http://localhost:1313/old/2022-11-16-0001-disqus-comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2022-11-16-0001-disqus-comments/</guid>
      <description>&lt;div id=&#34;outline-container-org904e464&#34; class=&#34;outline-2&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;org904e464&#34;&gt;DISQUS Install&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org904e464&#34;&gt;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;Installation of [DISQUS](&lt;a href=&#34;https://disqus.com/&#34;&gt;https://disqus.com/&lt;/a&gt;) for this  blog.&#xD;&#xA;Updates my disqus account, on my site which has the [Beautiful Jekyll](&lt;a href=&#34;https://beautifuljekyll.com/&#34;&gt;https://beautifuljekyll.com/&lt;/a&gt;) Theme&#xD;&#xA;uncomment the disqus line in _config.yml and add my Disqus short name from the General Page on my Disqus account.&#xD;&#xA;I want to allow comments on this post I add comments: yes  to my front matter.&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xD;&#xA;&lt;div id=&#34;outline-container-orga08df71&#34; class=&#34;outline-2&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;orga08df71&#34;&gt;First try&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orga08df71&#34;&gt;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;Hope it works.&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Appium, WinAppDriver design considerations</title>
      <link>http://localhost:1313/old/2019-08-31-appium-winappdriver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-08-31-appium-winappdriver/</guid>
      <description>&lt;p&gt;In the redesign process for automation for cygwin in a docker container&#xA;the following needs to be considered.&lt;/p&gt;&#xA;&lt;h2 id=&#34;considerations&#34;&gt;Considerations&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Appium or WinAppDriver based scripts&lt;/li&gt;&#xA;&lt;li&gt;The inclusion of WinAppDriver in target container.&lt;/li&gt;&#xA;&lt;li&gt;Configuration of WinAppDriver ports&lt;/li&gt;&#xA;&lt;li&gt;A developer language - Can I use common lisp?&lt;/li&gt;&#xA;&lt;li&gt;Scripting of automation&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;terms&#34;&gt;Terms&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A Task a specified activity&lt;/li&gt;&#xA;&lt;li&gt;A Documented Structure a solution to Task.&lt;/li&gt;&#xA;&lt;li&gt;A Coded Structure a completely coded solution to a Task.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;thoughts&#34;&gt;Thoughts&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Proof of concepts demostrates how to perform a certain activity leading to&#xA;documentation and/or coding of a Task.&lt;/li&gt;&#xA;&lt;li&gt;Issues about ports and appium for direct WebAppDriver relate to &amp;ldquo;the stucture&amp;rdquo; of the proposed solution to a task.&lt;/li&gt;&#xA;&lt;li&gt;A Coded Structure is prefered over a Documented Structure.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WinAppDriver/tree/master/Docs&#34;&gt;WinAppDriver Docs page&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WinAppDriver/blob/master/Docs/UsingAppium.md&#34;&gt;WebAppDriver Docs on Appium or WebAppDriver&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://common-lisp.net/project/cl-selenium/tutorial.html&#34;&gt;Common Lisp Selenium Tutorial&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Build a CYGWIN environment in docker Rev 02.</title>
      <link>http://localhost:1313/old/2019-08-07-build-a-cygwin-environment-v02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-08-07-build-a-cygwin-environment-v02/</guid>
      <description>&lt;h1 id=&#34;construct-a-base-cygwin-docker-environment&#34;&gt;Construct a base cygwin docker environment&lt;/h1&gt;&#xA;&lt;h2 id=&#34;appium-install-method&#34;&gt;Appium install method&lt;/h2&gt;&#xA;&lt;p&gt;Using Appium and inspect.exe script can be written to automate the cygwin download and install.&lt;/p&gt;&#xA;&lt;p&gt;Phase one is to test that a target can be build, where the source is my machine the appium host. The cygwin image is copied to the target machine from my build host.&lt;/p&gt;&#xA;&lt;p&gt;Phase two is to see if the build can be done on the target machine directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build a CYGWIN environment in docker Rev 03.</title>
      <link>http://localhost:1313/old/2019-09-04-build-a-cygwin-environment-v03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-09-04-build-a-cygwin-environment-v03/</guid>
      <description>&lt;h2 id=&#34;this-view-is-of-a-higher-level&#34;&gt;This view is of a higher level&lt;/h2&gt;&#xA;&lt;p&gt;To allow docker &lt;strong&gt;process isolation&lt;/strong&gt; of our target container we start with a specific version container. It is desired that this process will work for all relased OS versions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;using-gui-install-of-a-component&#34;&gt;Using GUI Install of a component&amp;hellip;&lt;/h2&gt;&#xA;&lt;p&gt;Large complexities of any scripted &lt;strong&gt;GUI install&lt;/strong&gt;,&#xA;require a design period to create extract the necessary GUI element info,&#xA;an install method design and debug process,&#xA;an &lt;strong&gt;orchestraion design&lt;/strong&gt; using &lt;strong&gt;GUI install toolkit&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build a CYGWIN environment in docker.</title>
      <link>http://localhost:1313/old/2019-07-26-build-a-cygwin-environment-for-gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-07-26-build-a-cygwin-environment-for-gitlab/</guid>
      <description>&lt;h1 id=&#34;construct-a-base-cygwin-docker-environment&#34;&gt;Construct a base cygwin docker environment&lt;/h1&gt;&#xA;&lt;p&gt;The basic method is to choose a windows base environment, next&#xA;interactively install cygwin in a host directory, use &lt;code&gt;https://www.cygwin.com/setup-x86_64.exe&lt;/code&gt;&#xA;Install apt-cyg from &lt;code&gt;https://github.com/ilatypov/apt-cyg/blob/master/apt-cyg&lt;/code&gt; in the docker image.&#xA;Using docker create an image with the cygwin host directory copied to the guest docker image: use &lt;code&gt;docker cp&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;using-this-process-an-image-was-created&#34;&gt;Using this process an image was created&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.docker.com/u/tomrake/repository/docker/tomrake/cygwin&#34;&gt;https://cloud.docker.com/u/tomrake/repository/docker/tomrake/cygwin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;next-iteration&#34;&gt;Next iteration&lt;/h2&gt;&#xA;&lt;p&gt;Need to add a normal user.&lt;/p&gt;</description>
    </item>
    <item>
      <title>building CLISP</title>
      <link>http://localhost:1313/old/2019-07-12-building-clisp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-07-12-building-clisp/</guid>
      <description>&lt;h1 id=&#34;building-clisp-on-gitlab&#34;&gt;Building CLISP on gitlab&lt;/h1&gt;&#xA;&lt;p&gt;Attempt to build CLISP on gitlab as a CI project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;multiple-platform-support&#34;&gt;Multiple platform support.&lt;/h2&gt;&#xA;&lt;p&gt;CLISP can be built on many platforms. Among them are&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Windows&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MSC&lt;/li&gt;&#xA;&lt;li&gt;mingw64 - a Unix&lt;/li&gt;&#xA;&lt;li&gt;cygwin  - a Unix&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;MacOS - I don&amp;rsquo;t have this.&lt;/li&gt;&#xA;&lt;li&gt;Unix&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux&lt;/li&gt;&#xA;&lt;li&gt;FreeBDS&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;clisp-documentation&#34;&gt;CLISP documentation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;for-windows---installwindows&#34;&gt;For Windows - install.WINDOWS&lt;/h3&gt;&#xA;&lt;h3 id=&#34;for-unix---unixinstall&#34;&gt;For UNIX - unix/INSTALL&lt;/h3&gt;&#xA;&lt;h3 id=&#34;for-porting-general---unixplatforms&#34;&gt;For Porting general - unix/PLATFORMS&lt;/h3&gt;&#xA;&lt;h2 id=&#34;general-approach-for-docker-build&#34;&gt;General Approach for docker build&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create a base platform with all needed dependecies&lt;/li&gt;&#xA;&lt;li&gt;Do the configure and build&lt;/li&gt;&#xA;&lt;li&gt;Do the tests.&lt;/li&gt;&#xA;&lt;li&gt;Export the build artifacts&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;each-platform-is-defined-by-a-key-string&#34;&gt;Each platform is defined by a key string&lt;/h2&gt;&#xA;&lt;p&gt;The build tools are a large case statement based on the key string, or perhaps there is a key.platform statement which tells the specific build conditions and methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>building CLISP - Dependencies</title>
      <link>http://localhost:1313/old/2019-07-14-buildiing-clisp-pt-2-building-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-07-14-buildiing-clisp-pt-2-building-dependencies/</guid>
      <description>&lt;h1 id=&#34;building-clisp-dependencies&#34;&gt;Building CLISP dependencies.&lt;/h1&gt;&#xA;&lt;h2 id=&#34;design-a-general-build-process&#34;&gt;Design a general build process.&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Specify requirements&lt;/li&gt;&#xA;&lt;li&gt;build a prototype&lt;/li&gt;&#xA;&lt;li&gt;report considerations&lt;/li&gt;&#xA;&lt;li&gt;is it suffiencent?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Yes - move to a release build&lt;/li&gt;&#xA;&lt;li&gt;No - Report; modify requirement and iterate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;artifacts in a docker volume&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Where docker can find it.&lt;/li&gt;&#xA;&lt;li&gt;Can gitlab find it too?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;source in a docker volume&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;source means current source&lt;/li&gt;&#xA;&lt;li&gt;The source is updatable&lt;/li&gt;&#xA;&lt;li&gt;The source is versionable&lt;/li&gt;&#xA;&lt;li&gt;docker issues ??&lt;/li&gt;&#xA;&lt;li&gt;gitlab issues ??&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;build log is accessable&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compile SBCL 2.0.0 under mingw64</title>
      <link>http://localhost:1313/old/2020-03-15-sbcl-compile-under-ming64/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2020-03-15-sbcl-compile-under-ming64/</guid>
      <description>&lt;h2 id=&#34;i-am-experimenting-with-a-sbcl-compiled-for-mingw64&#34;&gt;I am experimenting with a SBCL compiled for mingw64&lt;/h2&gt;&#xA;&lt;p&gt;I use &lt;a href=&#34;https://solarianprogrammer.com/2019/08/20/building-sbcl-steel-bank-common-lisp-windows/&#34;&gt;the Solarian Programmer&amp;rsquo;s Guide&lt;/a&gt; to build SBCL under mingw64.&#xA;I am building the 2.0.0 from source.&lt;/p&gt;&#xA;&lt;p&gt;I have MSYS2 installed at &lt;code&gt;C:\devel\msys64&lt;/code&gt; which is &lt;code&gt;/c/devel/msys64&lt;/code&gt; in MSYS2.&lt;/p&gt;&#xA;&lt;p&gt;I have the binary windows distribution of SBCL 2.0.0 at &lt;code&gt;/c/devel/SBCL_2_0_0-bin&lt;/code&gt; and I keep the sources at &lt;code&gt;/c/devel/SBCL_2_0_0-src&lt;/code&gt; this includes the source.tar.bz2  the binary msi, as well as the expanded source.&lt;/p&gt;&#xA;&lt;p&gt;I used these steps&#xA;at MSYS command line do:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Critic of Build a Cygwin Environment - Cycle 1</title>
      <link>http://localhost:1313/old/2019-07-30-critic-build-a-cygwin-environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-07-30-critic-build-a-cygwin-environment/</guid>
      <description>&lt;h1 id=&#34;this-critic-closed-see-cycle-2&#34;&gt;This Critic closed see Cycle 2&lt;/h1&gt;&#xA;&lt;h1 id=&#34;critic-of-build-a-cygwin-environment-in-docker&#34;&gt;Critic of Build a CYGWIN environment in docker.&lt;/h1&gt;&#xA;&lt;h2 id=&#34;adduser-needs-debugging-fails-to-work-as-expected&#34;&gt;AddUser needs debugging, fails to work as expected&lt;/h2&gt;&#xA;&lt;h2 id=&#34;build-the-base-cygwin-environment&#34;&gt;Build the base CYGWIN environment.&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ui-automation&#34;&gt;UI Automation&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/winauto/uiauto-usefortesting&#34;&gt;UI Automation&lt;/a&gt; is an automation tools for Windows UI. Can a powershell script build the base CYGWIN image?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can this be done in the docker windows image? likely no.&lt;/li&gt;&#xA;&lt;li&gt;Can cygwin install be automated? likely yes.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;uiautomationdll-how-to-get-it&#34;&gt;UIAutomation.dll how to get it?&lt;/h2&gt;&#xA;&lt;h3 id=&#34;best-instructions&#34;&gt;Best Instructions&lt;/h3&gt;&#xA;&lt;p&gt;The UIAutomation.dll file is in a cryptic named file which need to be extracted.&#xA;The best instructions for how are at &lt;a href=&#34;https://community.spiceworks.com/how_to/160771-how-to-obtain-and-install-uiautomation-dll&#34;&gt;https://community.spiceworks.com/how_to/160771-how-to-obtain-and-install-uiautomation-dll&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ephemeral Customization</title>
      <link>http://localhost:1313/old/2019-09-18-ephemeral-customization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-09-18-ephemeral-customization/</guid>
      <description>&lt;h1 id=&#34;ephemeral--customization&#34;&gt;Ephemeral + Customization&lt;/h1&gt;&#xA;&lt;p&gt;Launch an ephemeral vm with customized environment.&#xA;All permanent state is stored in an attached environment.&#xA;The vm can be killed or restarted without data loss.&lt;/p&gt;</description>
    </item>
    <item>
      <title>git V the Patch</title>
      <link>http://localhost:1313/old/2019-07-16-git-v-patches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-07-16-git-v-patches/</guid>
      <description>&lt;h1 id=&#34;how-to-well-meaning-team-got-into-a-conflict&#34;&gt;How to well meaning team got into a conflict&lt;/h1&gt;&#xA;&lt;p&gt;Git for Windows is based on it&amp;rsquo;s own code on the msys2/mingw-64 code base.&#xA;The msys2/mingw-64 team uses a patched based contribution system to rebuild it&amp;rsquo;s system.&#xA;The msys2/mingw-64 system is built as a series of packages, by a recipe which includes patching of the source code at build time.&lt;/p&gt;&#xA;&lt;p&gt;Git for windows includes many of the same tool but builds them from a single git repository.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Local Support Services Design</title>
      <link>http://localhost:1313/old/2019-09-16-support-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-09-16-support-services/</guid>
      <description>&lt;h1 id=&#34;redesign-for-reliablity&#34;&gt;Redesign for reliablity&lt;/h1&gt;&#xA;&lt;h2 id=&#34;current-useage&#34;&gt;Current useage&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Main Client uses a FileHistoryHost volumn and a Bugzilla server&lt;/li&gt;&#xA;&lt;li&gt;FileHistoryHost is a shared Windows Volumn from the host.&lt;/li&gt;&#xA;&lt;li&gt;FileHistoryHost also run a VirtualBox.&lt;/li&gt;&#xA;&lt;li&gt;A VM debian is run on the VirualBox.&lt;/li&gt;&#xA;&lt;li&gt;VM debian runs a Bugzilla service.&lt;/li&gt;&#xA;&lt;li&gt;VM debian runs a MariaDB service.&lt;/li&gt;&#xA;&lt;li&gt;Bugzilla service uses MariaDB as a store.&lt;/li&gt;&#xA;&lt;li&gt;VM debian does backup the Bugzilla database to FileHistory Host.&lt;/li&gt;&#xA;&lt;li&gt;Former Main Client needs Fan Repair.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bluesky-wishes&#34;&gt;BlueSky Wishes&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Backup as a service with switchable archive servers&lt;/li&gt;&#xA;&lt;li&gt;MariaDB in separate VM or container&lt;/li&gt;&#xA;&lt;li&gt;Bugzilla in separate VM or container&lt;/li&gt;&#xA;&lt;li&gt;A development build service - likely &lt;a href=&#34;https://docs.gitlab.com/runner/&#34;&gt;Gitlab Runner&lt;/a&gt; based.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Mastodon Culture - Search and Hashtags</title>
      <link>http://localhost:1313/old/2022-11-17-0001-mastodon-update-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2022-11-17-0001-mastodon-update-01/</guid>
      <description>&lt;p&gt;&#xD;&#xA;A few days ago I did a series of hashtag searches and found groups of conversations of a bunch of interesting topics.&#xD;&#xA;Hashtags add speed and excitement to Mastodon.&#xD;&#xA;Given that Mastodon has no global text search except for hashtags and there  is a reason for it.&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;Mastodon was designed with &#34;friction&#34; to slow down the propagation of information.&#xD;&#xA;By forcing propagation of post through posts of individuals and the lack of site wide search.&#xD;&#xA;Mastodon promote small conversations and not the quick spread of mass outrage&#xD;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>MSYS2 Upgrade</title>
      <link>http://localhost:1313/old/2019-11-22-msys2-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-11-22-msys2-upgrade/</guid>
      <description>&lt;h3 id=&#34;the-source-for-info-on-msys2httpswwwmsys2org&#34;&gt;&lt;a href=&#34;https://www.msys2.org/&#34;&gt;The source for info on MSYS2&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;I refer to the &lt;a href=&#34;https://github.com/msys2/msys2/wiki/MSYS2-installation&#34;&gt;Detailed Install Guide&lt;/a&gt; &lt;a href=&#34;https://github.com/msys2/msys2/wiki/MSYS2-installation#iii-updating-packages&#34;&gt;Section III Updating packages.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;instructions&#34;&gt;Instructions&lt;/h3&gt;&#xA;&lt;p&gt;In MSYS2 shell execute &lt;code&gt;pacman -Syuu&lt;/code&gt; follow the instructions about terminating the shell process, I just close the window, and say OK to the termination dialog.&#xA;Repeat until no more upgrades.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Problems with KORE remote for KODI</title>
      <link>http://localhost:1313/old/2020-04-23-kore-kodi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2020-04-23-kore-kodi/</guid>
      <description>&lt;h1 id=&#34;covid-19-requires-me-to-reloacate&#34;&gt;COVID-19 requires me to reloacate&lt;/h1&gt;&#xA;&lt;h1 id=&#34;my-setup-the-hardware&#34;&gt;My setup the hardware&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kodi running on a  Raspberry Pi, wired link to a home router&lt;/li&gt;&#xA;&lt;li&gt;Kore an App running on an Android phone connected via wireless.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;my-configuration&#34;&gt;My configuration&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kodi Remote Server is configure on a local IP address at port 8080, User Name and Password.&lt;/li&gt;&#xA;&lt;li&gt;Kore a Remote Client is configured to use the above server address, port, name and pw.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;the-kore-problem&#34;&gt;The Kore problem&lt;/h1&gt;&#xA;&lt;p&gt;One moring my Kore remote stopped working due to a crashed home router.&#xA;The main symptom other than non-function was that the Kore - Media Center (selected from the left hamburger) icon had RED icon.&#xA;This icon should be GREEN when the client can connect to the server.&#xA;When connecting the icon may be YELLOW.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Report on source containers</title>
      <link>http://localhost:1313/old/2019-07-15-source-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-07-15-source-version/</guid>
      <description>&lt;h1 id=&#34;report-on-source-updating&#34;&gt;Report on source updating.&lt;/h1&gt;&#xA;&lt;p&gt;A gitlab rebuild is in response to a branch push.&lt;/p&gt;&#xA;&lt;h1 id=&#34;report-on-building-prototype&#34;&gt;Report on building prototype&lt;/h1&gt;&#xA;&lt;p&gt;An example prototype of a CLISP build system could be libsigsegv&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Prerequisite to CLISP&lt;/li&gt;&#xA;&lt;li&gt;Multi platform - release artifacts are&lt;/li&gt;&#xA;&lt;li&gt;Git hosted on savanah&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;how-the-builds-are-structured&#34;&gt;How the build(s) are structured&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;There is a build interface&lt;/li&gt;&#xA;&lt;li&gt;There are instances of Runner for each artifact target.&lt;/li&gt;&#xA;&lt;li&gt;Each runner has a tag - the tag is platform/artifact type.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Run sbcl, mingw64 version, from emacs slime.</title>
      <link>http://localhost:1313/old/2020-03-15-run-mingw64-compiled-sbcl-from-emacs-slime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2020-03-15-run-mingw64-compiled-sbcl-from-emacs-slime/</guid>
      <description>&lt;h2 id=&#34;make-mingw64sbcl-run-from-slime&#34;&gt;Make mingw64/sbcl run from slime.&lt;/h2&gt;&#xA;&lt;p&gt;In a previous post I created a sbcl which runs from the mingw64 shell. When I run sbcl from the ming64 prompt all works as expected but running it from CMD causes sbcl to complain that the core was built for another runtime.&lt;/p&gt;&#xA;&lt;p&gt;This problem has two potential solutions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Compile sbcl with CMD runtime.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Start a bash login shell and run sbcl programatically.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Option 1) requires I study the make process and possible build SBCL under MSYS2 by directing make to use mingw64 gcc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sauron buys Twitter!!</title>
      <link>http://localhost:1313/old/2022-11-13-sauron-buys-twitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2022-11-13-sauron-buys-twitter/</guid>
      <description>&lt;div id=&#34;outline-container-orga3389a2&#34; class=&#34;outline-2&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;orga3389a2&#34;&gt;BREAKING&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orga3389a2&#34;&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div id=&#34;outline-container-orgd6efdd3&#34; class=&#34;outline-3&#34;&gt;&#xD;&#xA;&lt;h3 id=&#34;orgd6efdd3&#34;&gt;Middle Earth&lt;/h3&gt;&#xD;&#xA;&lt;div class=&#34;outline-text-3&#34; id=&#34;text-orgd6efdd3&#34;&gt;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;In a report from the Bree Daily, Sauron, of Mordor, has reportedly paid 44 Billion Dollars in exchange for a Seer Stone called &#34;Twitter&#34;,&#xD;&#xA;a dollar being some odd foreign currency made of paper.&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;Mayor Sam Gamgee, of Bag End, has been quoted that&#xD;&#xA;&#34;he knows nothing of any of Sauron&#39;s latest dealings&#34; but&#xD;&#xA;is &#34;quite certain that no Rings of Power are involved.&#34;&#xD;&#xA;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;None of the other hobbit Adventurers could be reached for comment.&#xD;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SBCL on Windows, where is chocolatey package?</title>
      <link>http://localhost:1313/old/2020-01-28-sbcl-chocolatey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2020-01-28-sbcl-chocolatey/</guid>
      <description>&lt;h2 id=&#34;there-is-no-current-chocolatey-package-from-sbcl&#34;&gt;There is no current Chocolatey package from SBCL!&lt;/h2&gt;&#xA;&lt;p&gt;SBCL 2.0.0 on 12/29/2019 which include a windows installer.&#xA;There is a homebrew package for SBCL (see &lt;a href=&#34;https://formulae.brew.sh/formula/sbcl#default&#34;&gt;https://formulae.brew.sh/formula/sbcl#default&lt;/a&gt; ) so MacOS has a current SBCL.&#xA;When you check for Chocolatey package from SBCL (see &lt;a href=&#34;https://chocolatey.org/packages/sbcl&#34;&gt;https://chocolatey.org/packages/sbcl&lt;/a&gt; ) you find a package had a error 5 years ago.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-old-chocolatey-package-is-not-maintained&#34;&gt;The old chocolatey package is not maintained.&lt;/h2&gt;&#xA;&lt;p&gt;A new chocolatey package should be created and a maintence procedure should be created.&#xA;The best strategy is to introduce a script chocolatey release script into the SBCL release code in the SBCL build source code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scope and Extent of LISP Bindings</title>
      <link>http://localhost:1313/old/2019-08-25-scope-and-extent-of-lisp-bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-08-25-scope-and-extent-of-lisp-bindings/</guid>
      <description>&lt;h2 id=&#34;dynamic-variables&#34;&gt;Dynamic variables&lt;/h2&gt;&#xA;&lt;p&gt;Early versions of LISP had Dynamic variables.&#xA;This distinguished those variable from the Static ones which are largely fixed.&#xA;Things were fairly simple under this scheme but more complex for the programmers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;lexical-variable-and-closures&#34;&gt;Lexical variable and Closures&lt;/h2&gt;&#xA;&lt;p&gt;Later LISPs developed &amp;ldquo;lexical&amp;rdquo; bindings where the scope of the variables was limited by enclosing forms with in the text of LISP code, lexical is borrowed from the lexical analsys phase of compilers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Smoothing data in R</title>
      <link>http://localhost:1313/old/2019-05-01-smooth-averages-in-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-05-01-smooth-averages-in-r/</guid>
      <description>&lt;h2 id=&#34;smooth-six-months-twice-daily-data-in-r&#34;&gt;Smooth six months twice daily data in R&lt;/h2&gt;&#xA;&lt;p&gt;The data is entered on a LibreOffice spread sheet, and read into R wih&#xA;&lt;code&gt;read_ods()&lt;/code&gt;.  I adjust the time data like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.POSIXct&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strptime&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Time , &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%m/%d/%y %I:%M %p&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;TimeCode &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;as.numeric&lt;/span&gt;(data&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;Time)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;my-goal&#34;&gt;My goal&lt;/h3&gt;&#xA;&lt;p&gt;I want to average all items, within a averaging time window of a given size, for the entire data set,&#xA;the window starts at the first day of the data set and is advanced a single day until&#xA;the window is beyond the last day of the data set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Smoothing Date formats</title>
      <link>http://localhost:1313/old/2019-05-01-date-formats-for-smoothing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-05-01-date-formats-for-smoothing/</guid>
      <description>&lt;h2 id=&#34;whats-in-a-day&#34;&gt;Whats in a day?&lt;/h2&gt;&#xA;&lt;p&gt;86400 Seconds&lt;/p&gt;&#xA;&lt;h2 id=&#34;when-do-seconds-start-counting&#34;&gt;When do seconds start counting?&lt;/h2&gt;&#xA;&lt;p&gt;January 1, 1970 00:00:00 GMT is the zero second.&lt;/p&gt;&#xA;&lt;p&gt;That is on 2019-05-01 08:39:00 there have been 1541598420 seconds since Jan 1, 1970&lt;/p&gt;&#xA;&lt;h2 id=&#34;r-dates-are-the-number-of-days-since-january-1-1970&#34;&gt;R dates are the number of days since January 1, 1970&lt;/h2&gt;&#xA;&lt;p&gt;This means the numeric date time is date-number*86400&lt;/p&gt;&#xA;&lt;p&gt;The earliest time-code is &lt;code&gt;min(data$TimeCode)&lt;/code&gt; and the last time-code in max(data$TimeCode). The begining data-time-window time-code is &lt;code&gt;86400*as.numeric(min(data$Date))&lt;/code&gt; the ending date-time-window time-code is the beginning plus the window size in seconds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Brittle Nature of Technology</title>
      <link>http://localhost:1313/old/2020-03-04-brittle-technology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2020-03-04-brittle-technology/</guid>
      <description>&lt;h1 id=&#34;software-is-brittle&#34;&gt;Software is brittle&lt;/h1&gt;&#xA;&lt;p&gt;A change of a single character in the source code can cause a failure.&#xA;When debugging these type brittle errors are fixes.&#xA;It is only with testing to address the brittle points that software can become useful.&lt;/p&gt;&#xA;&lt;h1 id=&#34;software-systems-can-be-brittle&#34;&gt;Software systems can be brittle&lt;/h1&gt;&#xA;&lt;p&gt;The inspiration for this post is the difficulties I am having using SBCL on Windows 10.&#xA;I have viewed SBCL as a unix product with limited support for the Windows port.&#xA;Code has been contributed that assumes &amp;ldquo;the unix way&amp;rdquo; of thinking (should I say the New Jersey way?)&lt;/p&gt;</description>
    </item>
    <item>
      <title>The History of LISP</title>
      <link>http://localhost:1313/old/2019-05-24-explaining-lisp-part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-05-24-explaining-lisp-part-1/</guid>
      <description>&lt;h2 id=&#34;how-we-got-common-lisp-standard&#34;&gt;How we got Common LISP Standard&lt;/h2&gt;&#xA;&lt;p&gt;Calculations for atomic weapons and space based delivery systems for the same are the step father the computer industry.&#xA;LISP is the second oldest high level programming language, FORTRAN was the first. Both conceieved in the 1950s.&#xA;Artificial Intelligence, a term coined by LISP&amp;rsquo;s father John McCarthy, to pigeon hole the space he was interested in exploring.&lt;/p&gt;&#xA;&lt;p&gt;LISP was developed in several dialects thought the &amp;rsquo;80s, a stanard committee was created to create a common dialect which we call Common LISP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The LISP Problem</title>
      <link>http://localhost:1313/old/2019-05-22-the-lisp-problem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-05-22-the-lisp-problem/</guid>
      <description></description>
    </item>
    <item>
      <title>Tom&#39;s explanation of LISP history</title>
      <link>http://localhost:1313/old/2019-05-28-notes-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-05-28-notes-1/</guid>
      <description>&lt;h2 id=&#34;church-turing-and-von-neuman&#34;&gt;Church, Turing and von Neuman&lt;/h2&gt;&#xA;&lt;p&gt;Alonzo Church solved the halting problem with the invention of lambda calculus.&#xA;Alan Turing solved the equivanent problem by the invention of the Turning machine.&#xA;John Von Neuman proposed an electronic computer based on the Universal Turing Machine&#xA;to do physics calculation for nuclear fusion evaluation, his model is the basis for&#xA;our modern computer systems.&lt;/p&gt;&#xA;&lt;h2 id=&#34;fortran-and-lisp&#34;&gt;FORTRAN and LISP&lt;/h2&gt;&#xA;&lt;p&gt;The first high level compiled language was FORTRAN. First proposed in 1953 the first compiler was delivered in 1957. In 1958 John McCarthy proposed a language LISP which concerned ideas of Church&amp;rsquo;s lambda calculus. The first compiler was implmented in 1959, during   1962 the first ocmpiler of LISP written completely in LISP was delivered. This was an incremental compiler which piece by piece compiled itself. This began the tradition of the interactive REPL that is part of today&amp;rsquo;s LISP system, as a consequence the concept of the IMAGE of a LISP system was also developed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trump is in denial over the coronavirus.</title>
      <link>http://localhost:1313/old/2020-08-05-trump-in-denial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2020-08-05-trump-in-denial/</guid>
      <description>&lt;h1 id=&#34;trump-is-in-denial-over-the-coronavirus&#34;&gt;Trump is in denial over the coronavirus.&lt;/h1&gt;&#xA;&lt;p&gt;There is a limit to the power of positive thinking.&#xA;At every stage Trump has voiced a rosy scenario about the coronaviurs,&#xA;only 15 cases,&#xA;it will be gone by summer.&#xA;Persistently the negative truth presents itself.&#xA;The coronavirus is a threat to be reckoned with and not dismissed.&lt;/p&gt;&#xA;&lt;h2 id=&#34;trump-loyalist-are-contributing-to-his-dysfunction&#34;&gt;Trump loyalist are contributing to his dysfunction&lt;/h2&gt;&#xA;&lt;p&gt;I believe the loyal Trump supporters in the White house are still presenting&#xA;him with rosy pictures.&#xA;Pleasing Trump is more important than factual presenttions.&#xA;Reality has a very tough way of presenting itself in light of the coronavirus.&#xA;But the rosy supporters may just move on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Update emacs to 26.2</title>
      <link>http://localhost:1313/old/2019-04-29-update-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-04-29-update-emacs/</guid>
      <description>&lt;h2 id=&#34;this-is-a-windows-10-system&#34;&gt;This is a Windows 10 system&lt;/h2&gt;&#xA;&lt;p&gt;My system is a Windows 10/64bit&lt;/p&gt;&#xA;&lt;h2 id=&#34;download-expand-and-update-emacs_home&#34;&gt;Download, expand and update EMACS_HOME&lt;/h2&gt;&#xA;&lt;p&gt;I downloaded the new emacs from the GNU ftp site. The file was &lt;a href=&#34;https://ftp.gnu.org/gnu/emacs/windows/emacs-26/emacs-26.2-x86_64.zip&#34;&gt;https://ftp.gnu.org/gnu/emacs/windows/emacs-26/emacs-26.2-x86_64.zip&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The downloaded emacs zip was expanded into &lt;code&gt;C:\Program Files\Emacs\emacs-26.2-x86_64&lt;/code&gt; this is my new &lt;code&gt;EMACS_HOME&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;my-shortcuts-now-all-depend-on-emacs_home&#34;&gt;My shortcuts now all depend on EMACS_HOME&lt;/h2&gt;&#xA;&lt;p&gt;I have three shortcut for emacs, the daemon, the client and no-daemon.&lt;/p&gt;&#xA;&lt;p&gt;For the daemon the shortcut target is:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Update SBCL to 1.4.14</title>
      <link>http://localhost:1313/old/2019-04-29-update-sbcl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-04-29-update-sbcl/</guid>
      <description>&lt;h2 id=&#34;updating-sbcl-on-windows&#34;&gt;Updating SBCL on Windows&lt;/h2&gt;&#xA;&lt;p&gt;Download the new installer, &lt;a href=&#34;http://prdownloads.sourceforge.net/sbcl/sbcl-1.4.14-x86-64-windows-binary.msi&#34;&gt;http://prdownloads.sourceforge.net/sbcl/sbcl-1.4.14-x86-64-windows-binary.msi&lt;/a&gt;. Run the installer, the old SBCL is removed and the new one is installed. I had a few dll which I placed next to my sbcl.exe which remained in the old location. I moved these to the new location. The SBCL_HOME was also reset to the new location.&lt;/p&gt;&#xA;&lt;p&gt;My .emacs file slime-lisp-implemenations is written in terms of SBCL_HOME so it, just works.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Updating my site with org-mode</title>
      <link>http://localhost:1313/old/2022-11-15-0001-blogging-site-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2022-11-15-0001-blogging-site-update/</guid>
      <description>&lt;div id=&#34;outline-container-org2b9264d&#34; class=&#34;outline-2&#34;&gt;&#xD;&#xA;&lt;h2 id=&#34;org2b9264d&#34;&gt;I have updated blogging procedure&lt;/h2&gt;&#xD;&#xA;&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org2b9264d&#34;&gt;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;This is of a technical interest on how I actually produce my blog. &#xD;&#xA;I have always written by blog pages in emacs and&#xD;&#xA;historically have authored in Markdown syntax and the Beautiful Jekyll theme on GitHub.&#xD;&#xA;I now author my pages in org mode and use org-publish to render them to the Jekyll repository.&#xD;&#xA;Next I ensure that the blog posts are in the _posts/ folder and commit those changes to the git image of my site.&#xD;&#xA;Finally, I upload and push my local site to GitHub.&#xD;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use beutiful-jekyll as a github blog to avoid the double scroll in code problems.</title>
      <link>http://localhost:1313/old/2019-05-05-double-scrollboxes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2019-05-05-double-scrollboxes/</guid>
      <description>&lt;h2 id=&#34;beautiful-jekyll-is-a-fork-of-jekyll-now&#34;&gt;beautiful-jekyll is a fork of Jekyll-Now&lt;/h2&gt;&#xA;&lt;p&gt;Jekyll-Now was good effort by Barry Clarke and&#xA;&lt;a href=&#34;https://deanattali.com/beautiful-jekyll/&#34;&gt;https://deanattali.com/beautiful-jekyll/&lt;/a&gt; is an improved fork&#xA;of Jekyll Now that does not have the Double Scroll box problems. I would recommend starting any new github jekyll blog with &lt;a href=&#34;https://deanattali.com/beautiful-jekyll/&#34;&gt;Beautiful-Jekyll&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What&#39;s been going on.</title>
      <link>http://localhost:1313/old/2020-08-04-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2020-08-04-update/</guid>
      <description>&lt;h2 id=&#34;the-lockdown&#34;&gt;The lockdown&lt;/h2&gt;&#xA;&lt;p&gt;I am in an isolated location with one of my parents.&#xA;COVID-19 changed all my planing.&lt;/p&gt;&#xA;&lt;p&gt;It has been a long time since I have blogged.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-routing-setup&#34;&gt;The routing setup&lt;/h2&gt;&#xA;&lt;p&gt;The router is a WRT54G and there is wired extension to a DLink WBR-1310.&#xA;I previously used another WRT54G at the extension position but that is in use&#xA;at my orgininal location, which I and my wife use on weekly basis.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Where is the algorithm on Mastodon</title>
      <link>http://localhost:1313/old/2022-11-07-0001-mastodon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/old/2022-11-07-0001-mastodon/</guid>
      <description>&lt;div id=&#34;outline-container-orgf7f1e75&#34; class=&#34;outline-2&#34;&gt;&#xA;&lt;h2 id=&#34;orgf7f1e75&#34;&gt;Twitter users are running for the exits&lt;/h2&gt;&#xA;&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgf7f1e75&#34;&gt;&#xA;&lt;p&gt;&#xA;On Twitter national security and political view are expressed by many of those I follow, and today many are moving to mastodon.&#xA;Last night while auditioning mastodon as a Twitter replacement, I was feeling I did not get the information I desired all the posts etc.&#xA;Mastodon is not heavy on the recommendation engine, if there is one, and you are more in control of what you see in your Home feed.&#xA;You are the algorithm.&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
